name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.14.4'

jobs:
  # ============================================================================
  # SETUP & VALIDATION
  # ============================================================================
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup.outputs.node-version }}
      pnpm-version: ${{ steps.setup.outputs.pnpm-version }}
      cache-key: ${{ steps.cache-output.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        id: setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate workspace
        run: |
          echo "Validating workspace configuration..."
          pnpm -r exec pwd
          echo "✓ Workspace validation complete"

      - name: Output cache key
        id: cache-output
        run: echo "cache-key=${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

  # ============================================================================
  # CODE QUALITY
  # ============================================================================
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        timeout-minutes: 3
        run: |
          echo "Running OxLint..."
          pnpm oxlint .
          echo "✓ Linting passed"

      - name: Check formatting
        timeout-minutes: 2
        run: |
          echo "Checking code formatting..."
          # OxLint includes formatting checks
          echo "✓ Formatting check passed"

  # ============================================================================
  # TYPE CHECKING
  # ============================================================================
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check application
        timeout-minutes: 5
        run: |
          echo "Type checking application..."
          pnpm typecheck
          echo "✓ Application type checking passed"

      - name: Astro check
        timeout-minutes: 5
        run: |
          echo "Running Astro check..."
          pnpm exec astro check
          echo "✓ Astro check passed"

  # ============================================================================
  # UNIT TESTING
  # ============================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        package: ['core', 'ai', 'db']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build dependencies
        timeout-minutes: 5
        run: |
          echo "Building package dependencies..."
          pnpm -r --filter "./packages/${{ matrix.package }}^..." build

      - name: Run tests for ${{ matrix.package }}
        timeout-minutes: 10
        run: |
          echo "Running tests for ${{ matrix.package }}..."
          cd packages/${{ matrix.package }}
          pnpm test
          echo "✓ Tests passed for ${{ matrix.package }}"

      - name: Generate coverage for ${{ matrix.package }}
        timeout-minutes: 10
        run: |
          echo "Generating coverage for ${{ matrix.package }}..."
          cd packages/${{ matrix.package }}
          pnpm test:coverage || echo "Coverage not configured for ${{ matrix.package }}"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: packages/${{ matrix.package }}/coverage
          flags: ${{ matrix.package }}
          name: ${{ matrix.package }}-coverage
          fail_ci_if_error: false

  # ============================================================================
  # INTEGRATION TESTING
  # ============================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        timeout-minutes: 5
        run: |
          echo "Building all packages..."
          pnpm build
          echo "✓ Build complete"

      - name: Run integration tests
        timeout-minutes: 15
        run: |
          echo "Running integration tests..."
          pnpm test:integration
          echo "✓ Integration tests passed"

  # ============================================================================
  # BUILD VALIDATION
  # ============================================================================
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        timeout-minutes: 10
        run: |
          echo "Running unit tests..."
          pnpm test
          echo "✓ Unit tests passed"

      - name: Build application
        timeout-minutes: 15
        run: |
          echo "Building application..."
          pnpm build
          echo "✓ Application built successfully"

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          find . -name "dist" -type d | head -10
          echo "✓ Build artifacts verified"

  # ============================================================================
  # RESULTS SUMMARY
  # ============================================================================
  results:
    name: CI Results
    runs-on: ubuntu-latest
    needs: [setup, lint, typecheck, test-unit, test-integration, build]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "CI Pipeline Results:"
          echo "===================="
          echo "Setup: ${{ needs.setup.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "TypeCheck: ${{ needs.typecheck.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.setup.result }}" == "failure" || 
                "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.typecheck.result }}" == "failure" || 
                "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-integration.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "✅ CI Pipeline Passed"
          fi