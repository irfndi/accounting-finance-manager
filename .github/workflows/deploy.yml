name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

concurrency:
  group: deploy-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
  cancel-in-progress: false

env:
  NODE_VERSION: '22'
  PNPM_VERSION: 'latest'

jobs:
  # ============================================================================
  # DEPLOYMENT PREPARATION
  # ============================================================================
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      cache-key: ${{ steps.cache.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "üéØ Deploying to: $ENVIRONMENT"

      - name: Generate version
        id: version
        run: |
           if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
             VERSION="${{ github.ref_name }}"
           else
             VERSION="$(date +%Y%m%d)-$(echo '${{ github.sha }}' | cut -c1-7)"
           fi
           echo "version=$VERSION" >> $GITHUB_OUTPUT
           echo "üì¶ Version: $VERSION"

      - name: Check for deployment changes
        id: changes
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Rollback requested"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üöÄ Manual deployment requested"
          else
            # Check if there were changes to deployable code
            if git diff --quiet HEAD~1 -- src/ || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Deployment changes detected"
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è No deployment changes detected"
            fi
          fi

      - name: Setup cache key
        id: cache
        run: echo "cache-key=${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

  # ============================================================================
  # BUILD FOR DEPLOYMENT
  # ============================================================================
  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          echo "Store path: $STORE_PATH"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: |
          echo "üî® Building application for deployment..."
          pnpm build
          echo "‚úÖ Application built successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            functions/
          retention-days: 7

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should-deploy == 'true' && needs.prepare.outputs.environment == 'staging'
    # environment:
    #   name: staging
    #   url: https://finance-manager-staging.your-domain.workers.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          echo "Store path: $STORE_PATH"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers (Staging)
        run: |
          echo "üöÄ Deploying to staging environment..."
          pnpm deploy --env staging
          echo "‚úÖ Staging deployment completed"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run staging smoke tests
        run: |
          echo "üß™ Running staging smoke tests..."
          sleep 10 # Wait for deployment propagation
          # Add smoke test commands here
          curl -f https://finance-manager-staging.your-domain.workers.dev/health || echo "Health check failed"
          echo "‚úÖ Staging smoke tests completed"

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should-deploy == 'true' && needs.prepare.outputs.environment == 'production'
    # environment:
    #   name: production
    #   url: https://finance-manager.your-domain.workers.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Get pnpm store directory
        shell: bash
        run: |
          STORE_PATH=$(pnpm store path --silent)
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV
          echo "Store path: $STORE_PATH"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create deployment backup
        run: |
          echo "üíæ Creating deployment backup..."
          # Store current deployment info for potential rollback
          echo "BACKUP_VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          echo "‚úÖ Backup prepared"

      - name: Deploy to Cloudflare Workers (Production)
        run: |
          echo "üöÄ Deploying to production environment..."
          pnpm deploy --env production
          echo "‚úÖ Production deployment completed"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run production smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          sleep 15 # Wait for deployment propagation
          # Add production smoke test commands here
          curl -f https://finance-manager.your-domain.workers.dev/health || echo "Health check failed"
          echo "‚úÖ Production smoke tests completed"

      - name: Create deployment tag
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üè∑Ô∏è Creating deployment tag..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "deploy-${{ needs.prepare.outputs.version }}" -m "Production deployment ${{ needs.prepare.outputs.version }}"
          git push origin "deploy-${{ needs.prepare.outputs.version }}"
          echo "‚úÖ Deployment tag created"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # ROLLBACK DEPLOYMENT
  # ============================================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [prepare]
    if: github.event.inputs.rollback == 'true'
    environment:
      name: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get previous deployment
        id: previous
        run: |
          echo "üîç Finding previous deployment..."
          # Get the second most recent deployment tag
          PREVIOUS_TAG=$(git tag -l "deploy-*" | sort -V | tail -2 | head -1)
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous deployment tag: $PREVIOUS_TAG"

      - name: Checkout previous version
        run: |
          echo "‚è™ Rolling back to previous version..."
          git checkout ${{ steps.previous.outputs.previous-tag }}

      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment..."
          pnpm deploy --env ${{ needs.prepare.outputs.environment }}
          echo "‚úÖ Rollback completed"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Verify rollback
        run: |
          echo "‚úÖ Verifying rollback..."
          sleep 10 # Wait for deployment propagation
          # Add rollback verification commands here
          echo "‚úÖ Rollback verification completed"

  # ============================================================================
  # DEPLOYMENT NOTIFICATION
  # ============================================================================
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production, rollback]
    if: always() && needs.prepare.outputs.should-deploy == 'true'
    steps:
      - name: Determine deployment result
        id: result
        run: |
          if [[ "${{ github.event.inputs.rollback }}" == "true" ]]; then
            if [[ "${{ needs.rollback.result }}" == "success" ]]; then
              echo "status=‚úÖ Rollback Successful" >> $GITHUB_OUTPUT
              echo "color=good" >> $GITHUB_OUTPUT
            else
              echo "status=‚ùå Rollback Failed" >> $GITHUB_OUTPUT
              echo "color=danger" >> $GITHUB_OUTPUT
            fi
          else
            STAGING_RESULT="${{ needs.deploy-staging.result }}"
            PRODUCTION_RESULT="${{ needs.deploy-production.result }}"
            
            if [[ "$STAGING_RESULT" == "success" || "$PRODUCTION_RESULT" == "success" ]]; then
              echo "status=‚úÖ Deployment Successful" >> $GITHUB_OUTPUT
              echo "color=good" >> $GITHUB_OUTPUT
            else
              echo "status=‚ùå Deployment Failed" >> $GITHUB_OUTPUT
              echo "color=danger" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.prepare.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.result.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            echo "üåê **Production URL:** https://finance-manager.your-domain.workers.dev" >> $GITHUB_STEP_SUMMARY
          else
            echo "üß™ **Staging URL:** https://finance-manager-staging.your-domain.workers.dev" >> $GITHUB_STEP_SUMMARY
          fi

      # Uncomment and configure for Slack notifications
      # - name: Notify Slack
      #   uses: 8398a7/action-slack@v3
      #   if: always()
      #   with:
      #     status: ${{ steps.result.outputs.color }}
      #     channel: '#deployments'
      #     text: |
      #       ${{ steps.result.outputs.status }}
      #       Environment: ${{ needs.prepare.outputs.environment }}
      #       Version: ${{ needs.prepare.outputs.version }}
      #       Commit: ${{ github.sha }}
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}