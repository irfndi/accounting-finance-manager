name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.14.4'

jobs:
  # ============================================================================
  # PLAYWRIGHT E2E TESTS
  # ============================================================================
  e2e-test:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: mcr.microsoft.com/playwright:v1.53.1-jammy
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: |
          echo "Building application for E2E testing..."
          pnpm build
          echo "✓ Application built successfully"

      # Browsers are pre-installed in the Docker container
      # No need to install browsers separately

      - name: Start preview server
        run: |
          echo "Starting preview server..."
          cd apps/web
          pnpm preview > ../../preview.log 2>&1 &
          PREVIEW_PID=$!
          echo $PREVIEW_PID > ../../preview.pid
          echo "Preview server started with PID: $PREVIEW_PID"
          
          # Wait for server to be ready
          echo "Waiting for server to be ready..."
          for i in {1..60}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✓ Preview server is ready at http://localhost:3000"
              break
            fi
            echo "Attempt $i/60: Server not ready yet, waiting 2 seconds..."
            sleep 2
            if [ $i -eq 60 ]; then
              echo "❌ Server failed to start within 120 seconds"
              echo "Preview server logs:"
              cat ../../preview.log || echo "No logs available"
              exit 1
            fi
          done

      - name: Run Playwright tests
        working-directory: apps/web
        run: |
          echo "Running E2E tests with ${{ matrix.browser }}..."
          pnpm exec playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/2
          echo "✓ E2E tests completed"
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          BASE_URL: http://localhost:3000
          CI: true

      - name: Stop preview server
        if: always()
        run: |
          if [ -f preview.pid ]; then
            PREVIEW_PID=$(cat preview.pid)
            echo "Stopping preview server (PID: $PREVIEW_PID)..."
            kill $PREVIEW_PID 2>/dev/null || true
            rm -f preview.pid preview.log
            echo "✓ Preview server stopped and cleanup completed"
          else
            echo "No preview server PID file found"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            apps/web/test-results/
            apps/web/playwright-report/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots-${{ matrix.browser }}-${{ matrix.shard }}
          path: apps/web/test-results/
          retention-days: 7

  # ============================================================================
  # VISUAL REGRESSION TESTS
  # ============================================================================
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    container:
      image: mcr.microsoft.com/playwright:v1.53.1-jammy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Browsers are pre-installed in the Docker container
      # No need to install browsers separately

      - name: Start application
        run: |
          echo "Starting application for visual regression testing..."
          pnpm dev > dev.log 2>&1 &
          DEV_PID=$!
          echo $DEV_PID > dev.pid
          # Wait for server to be ready
          for i in {1..60}; do
            if curl -f http://localhost:3000/health >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✓ Development server is ready"
              break
            fi
            echo "Attempt $i/60: Server not ready yet, waiting 2 seconds..."
            sleep 2
            if [ $i -eq 60 ]; then
              echo "❌ Server failed to start within 120 seconds"
              cat dev.log || echo "No logs available"
              exit 1
            fi
          done
          echo "✓ Application is running (PID: $DEV_PID)"

      - name: Run visual regression tests
        working-directory: apps/web
        run: |
          echo "Running visual regression tests..."
          pnpm exec playwright test --project=visual-regression --grep="@visual"
          echo "✓ Visual regression tests completed"
        env:
          BASE_URL: http://localhost:3000
          CI: true

      - name: Stop application
        if: always()
        run: |
          if [ -f dev.pid ]; then
            DEV_PID=$(cat dev.pid)
            echo "Stopping application (PID: $DEV_PID)..."
            kill $DEV_PID 2>/dev/null || true
            rm -f dev.pid
          fi

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-diffs
          path: |
            apps/web/test-results/
            apps/web/visual-diffs/
          retention-days: 7

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    container:
      image: mcr.microsoft.com/playwright:v1.53.1-jammy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Lighthouse CI
        run: |
          echo "Installing Lighthouse CI..."
          npm install -g @lhci/cli@0.14.x
          echo "✓ Lighthouse CI installed"

      - name: Start application
        run: |
          echo "Starting application for performance testing..."
          pnpm dev > dev.log 2>&1 &
          DEV_PID=$!
          echo $DEV_PID > dev.pid
          # Wait for server to be ready
          for i in {1..60}; do
            if curl -f http://localhost:3000/health >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✓ Development server is ready"
              break
            fi
            echo "Attempt $i/60: Server not ready yet, waiting 2 seconds..."
            sleep 2
            if [ $i -eq 60 ]; then
              echo "❌ Server failed to start within 120 seconds"
              cat dev.log || echo "No logs available"
              exit 1
            fi
          done
          echo "✓ Application is running (PID: $DEV_PID)"

      - name: Run Lighthouse CI
        run: |
          echo "Running Lighthouse performance audit..."
          lhci autorun || echo "Lighthouse audit completed with warnings"
          echo "✓ Performance audit completed"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Stop application
        if: always()
        run: |
          if [ -f dev.pid ]; then
            DEV_PID=$(cat dev.pid)
            echo "Stopping application (PID: $DEV_PID)..."
            kill $DEV_PID 2>/dev/null || true
            rm -f dev.pid
          fi

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 7

  # ============================================================================
  # ACCESSIBILITY TESTING
  # ============================================================================
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    container:
      image: mcr.microsoft.com/playwright:v1.53.1-jammy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Browsers are pre-installed in the Docker container
      # No need to install browsers separately

      - name: Start application
        run: |
          echo "Starting application for accessibility testing..."
          pnpm dev > dev.log 2>&1 &
          DEV_PID=$!
          echo $DEV_PID > dev.pid
          # Wait for server to be ready
          for i in {1..60}; do
            if curl -f http://localhost:3000/health >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✓ Development server is ready"
              break
            fi
            echo "Attempt $i/60: Server not ready yet, waiting 2 seconds..."
            sleep 2
            if [ $i -eq 60 ]; then
              echo "❌ Server failed to start within 120 seconds"
              cat dev.log || echo "No logs available"
              exit 1
            fi
          done
          echo "✓ Application is running (PID: $DEV_PID)"

      - name: Run accessibility tests
        working-directory: apps/web
        run: |
          echo "Running accessibility tests..."
          pnpm exec playwright test --project=accessibility --grep="@a11y"
          echo "✓ Accessibility tests completed"
        env:
          BASE_URL: http://localhost:3000
          CI: true

      - name: Stop application
        if: always()
        run: |
          if [ -f dev.pid ]; then
            DEV_PID=$(cat dev.pid)
            echo "Stopping application (PID: $DEV_PID)..."
            kill $DEV_PID 2>/dev/null || true
            rm -f dev.pid
          fi

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports
          path: |
            apps/web/accessibility-reports/
            apps/web/test-results/
          retention-days: 7

  # ============================================================================
  # E2E RESULTS SUMMARY
  # ============================================================================
  e2e-results:
    name: E2E Results Summary
    runs-on: ubuntu-latest
    needs: [e2e-test, visual-regression, performance, accessibility]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate test summary
        run: |
          echo "E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "======================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Browser Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-test.result }} | Chromium, Firefox, WebKit |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Regression | ${{ needs.visual-regression.result }} | Chromium |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance.result }} | Lighthouse CI |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility.result }} | axe-playwright |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.e2e-test.result }}" == "failure" || 
                "${{ needs.visual-regression.result }}" == "failure" || 
                "${{ needs.performance.result }}" == "failure" || 
                "${{ needs.accessibility.result }}" == "failure" ]]; then
            echo "❌ E2E Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the individual job results and artifacts for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ E2E Pipeline Passed" >> $GITHUB_STEP_SUMMARY
            echo "All end-to-end tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check results
        run: |
          echo "E2E Pipeline Results:"
          echo "===================="
          echo "Setup: ${{ needs.e2e-setup.result }}"
          echo "E2E Tests: ${{ needs.e2e-test.result }}"
          echo "Visual Regression: ${{ needs.visual-regression.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Accessibility: ${{ needs.accessibility.result }}"
          
          if [[ "${{ needs.e2e-setup.result }}" == "failure" || 
                "${{ needs.e2e-test.result }}" == "failure" || 
                "${{ needs.visual-regression.result }}" == "failure" || 
                "${{ needs.performance.result }}" == "failure" || 
                "${{ needs.accessibility.result }}" == "failure" ]]; then
            echo "❌ E2E Pipeline Failed"
            exit 1
          else
            echo "✅ E2E Pipeline Passed"
          fi