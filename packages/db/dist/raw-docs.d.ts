import type { Database } from './index';
import { NewRawDoc, UpdateRawDoc } from './schema/documents';
export declare function getRawDocByFileId(db: Database, fileId: string): Promise<{
    id: number;
    description: string | null;
    createdAt: Date;
    updatedAt: Date;
    createdBy: string | null;
    tags: string | null;
    category: string | null;
    entityId: string | null;
    updatedBy: string | null;
    fileId: string;
    originalName: string;
    mimeType: string;
    fileSize: number;
    r2Key: string;
    r2Bucket: string;
    extractedText: string | null;
    textLength: number;
    ocrConfidence: number | null;
    ocrProcessingTime: number | null;
    ocrStatus: string;
    ocrErrorMessage: string | null;
    ocrErrorCode: string | null;
    ocrFallbackUsed: boolean | null;
    ocrRetryable: boolean | null;
    ocrMaxRetries: number | null;
    ocrProcessedAt: Date | null;
    documentType: string | null;
    structuredData: string | null;
    llmConfidence: number | null;
    llmProcessedAt: Date | null;
    uploadedBy: string;
    searchableText: string | null;
} | undefined>;
export declare function createRawDoc(db: Database, data: NewRawDoc): Promise<{
    id: number;
    description: string | null;
    createdAt: Date;
    updatedAt: Date;
    createdBy: string | null;
    tags: string | null;
    category: string | null;
    entityId: string | null;
    updatedBy: string | null;
    fileId: string;
    originalName: string;
    mimeType: string;
    fileSize: number;
    r2Key: string;
    r2Bucket: string;
    extractedText: string | null;
    textLength: number;
    ocrConfidence: number | null;
    ocrProcessingTime: number | null;
    ocrStatus: string;
    ocrErrorMessage: string | null;
    ocrErrorCode: string | null;
    ocrFallbackUsed: boolean | null;
    ocrRetryable: boolean | null;
    ocrMaxRetries: number | null;
    ocrProcessedAt: Date | null;
    documentType: string | null;
    structuredData: string | null;
    llmConfidence: number | null;
    llmProcessedAt: Date | null;
    uploadedBy: string;
    searchableText: string | null;
}[]>;
export declare function updateRawDocOCR(db: Database, fileId: string, data: Partial<UpdateRawDoc>): Promise<{
    id: number;
    description: string | null;
    createdAt: Date;
    updatedAt: Date;
    createdBy: string | null;
    tags: string | null;
    category: string | null;
    entityId: string | null;
    updatedBy: string | null;
    fileId: string;
    originalName: string;
    mimeType: string;
    fileSize: number;
    r2Key: string;
    r2Bucket: string;
    extractedText: string | null;
    textLength: number;
    ocrConfidence: number | null;
    ocrProcessingTime: number | null;
    ocrStatus: string;
    ocrErrorMessage: string | null;
    ocrErrorCode: string | null;
    ocrFallbackUsed: boolean | null;
    ocrRetryable: boolean | null;
    ocrMaxRetries: number | null;
    ocrProcessedAt: Date | null;
    documentType: string | null;
    structuredData: string | null;
    llmConfidence: number | null;
    llmProcessedAt: Date | null;
    uploadedBy: string;
    searchableText: string | null;
}[]>;
export declare function updateRawDoc(db: Database, fileId: string, data: Partial<UpdateRawDoc>): Promise<{
    id: number;
    description: string | null;
    createdAt: Date;
    updatedAt: Date;
    createdBy: string | null;
    tags: string | null;
    category: string | null;
    entityId: string | null;
    updatedBy: string | null;
    fileId: string;
    originalName: string;
    mimeType: string;
    fileSize: number;
    r2Key: string;
    r2Bucket: string;
    extractedText: string | null;
    textLength: number;
    ocrConfidence: number | null;
    ocrProcessingTime: number | null;
    ocrStatus: string;
    ocrErrorMessage: string | null;
    ocrErrorCode: string | null;
    ocrFallbackUsed: boolean | null;
    ocrRetryable: boolean | null;
    ocrMaxRetries: number | null;
    ocrProcessedAt: Date | null;
    documentType: string | null;
    structuredData: string | null;
    llmConfidence: number | null;
    llmProcessedAt: Date | null;
    uploadedBy: string;
    searchableText: string | null;
}[]>;
export declare function generateSearchableText(text: string): string;
export declare function parseTags(tags: string): string[];
export declare function getUploadStats(db: Database, userId: string): Promise<{
    count: number;
    totalSize: number;
}>;
//# sourceMappingURL=raw-docs.d.ts.map